name: Build ShellCheck for Android

# Run when manually triggered
on: workflow_dispatch

jobs:
  package_source:
    name: Package Source Code
    runs-on: ubuntu-latest
    steps:
      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-mark manual ghc
          sudo apt-get install cabal-install

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Deduce tags
        run: |
          mkdir source
          echo "latest" > source/tags
          if tag=$(git describe --exact-match --tags)
          then
            echo "stable" >> source/tags
            echo "$tag" >> source/tags
          fi
          cat source/tags

      - name: Package Source
        run: |
          # Handle the case when there are no git tags
          if ! git describe --tags 2>/dev/null; then
            echo "No git tags found, using setgitversion script"
            ./setgitversion || echo "Using default version"
          fi
          cabal sdist
          mkdir -p dist-newstyle/sdist
          find . -name "*.tar.gz" -exec cp {} dist-newstyle/sdist/ \;
          mkdir -p source
          find dist-newstyle/sdist -name "*.tar.gz" -exec cp {} source/source.tar.gz \; || echo "Creating empty source archive"
          [ -f source/source.tar.gz ] || tar -czf source/source.tar.gz --exclude=.git .

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: source
          path: source/

  build_android:
    name: Build Android
    needs: package_source
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [aarch64, armv7, x86_64, x86]
        include:
          - arch: aarch64
            target: aarch64-linux-android
            lib_dir: arm64-v8a
            android_abi: arm64-v8a
            clang_target: aarch64-linux-android21-clang
          - arch: armv7
            target: armv7-linux-androideabi
            lib_dir: armv7
            android_abi: armeabi-v7a
            clang_target: armv7a-linux-androideabi21-clang
          - arch: x86_64
            target: x86_64-linux-android
            lib_dir: x86_64
            android_abi: x86_64
            clang_target: x86_64-linux-android21-clang
          - arch: x86
            target: i686-linux-android
            lib_dir: x86
            android_abi: x86
            clang_target: i686-linux-android21-clang
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v4

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y cabal-install ghc haskell-stack
          cabal update

      - name: Install Android NDK
        uses: nttld/setup-ndk@v1
        with:
          ndk-version: r27c
          add-to-path: true

      - name: Unpack source
        run: |
          mkdir -p build
          cd source
          tar xvf source.tar.gz --strip-components=1 -C ../build

      - name: Build ShellCheck for Android
        run: |
          cd build
          echo "Building ShellCheck for ${{ matrix.arch }}"
          
          # Setup environment variables
          export PATH=$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin:$PATH
          export CC=${{ matrix.clang_target }}
          export CXX=${{ matrix.clang_target }}++
          export AR=llvm-ar
          export RANLIB=llvm-ranlib
          export STRIP=llvm-strip
          
          # Configure cabal for cross-compilation
          mkdir -p $HOME/.cabal
          cat > $HOME/.cabal/config <<EOF
          -- Cross-compilation settings for Android
          extra-include-dirs: $ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/sysroot/usr/include
          extra-lib-dirs: $ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/sysroot/usr/lib/${{ matrix.target }}/21
          EOF
          
          # Build ShellCheck
          cabal configure --ghc-options="-optl-static -optl-pthread" --flags="static"
          cabal build
          
          # Create output directory
          mkdir -p ../bin/android/${{ matrix.lib_dir }}
          
          # Copy the binary
          cp dist-newstyle/build/*/shellcheck-*/build/shellcheck/shellcheck ../bin/android/${{ matrix.lib_dir }}/
          
          # Strip the binary
          $STRIP ../bin/android/${{ matrix.lib_dir }}/shellcheck

      - name: Upload binary artifact
        uses: actions/upload-artifact@v4
        with:
          name: android.${{ matrix.arch }}.bin
          path: bin/android/${{ matrix.lib_dir }}/

  package_android_binaries:
    name: Package Android Binaries
    needs: build_android
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v4

      - name: Work around GitHub permissions bug
        run: chmod +x android.*.bin/*/shellcheck

      - name: Package Android binaries
        run: |
          export TAGS="$(cat source/tags)"
          mkdir -p deploy_android
          cp -r android.*.bin/* deploy_android
          cd deploy_android
          
          # Create zip archives for each architecture
          for arch in aarch64 armv7 x86_64 x86; do
            case $arch in
              aarch64) dir="arm64-v8a" ;;
              armv7) dir="armv7" ;;
              x86_64) dir="x86_64" ;;
              x86) dir="x86" ;;
            esac
            
            if [ -d "$dir" ]; then
              mkdir -p "$arch"
              cp -r "$dir"/* "$arch"/
              (cd "$arch" && zip -r "../shellcheck-android-$arch.zip" .)
            fi
          done
          
          # Create a combined zip with all architectures
          zip -r "shellcheck-android-all.zip" aarch64 armv7 x86_64 x86 -x "*.zip"

      - name: Upload packaged artifacts
        uses: actions/upload-artifact@v4
        with:
          name: android-binaries
          path: deploy_android/*.zip
